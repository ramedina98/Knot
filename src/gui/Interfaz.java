package gui;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StringReader;

import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.*;

import lexer.Lexer;
import semantics.Semantic;
import syntax.SyntaxAnalyzerControlStructures;
import syntax.SyntaxAnalyzerVariables;
import syntax.SyntaxException;
import syntax.Token;
import utils.Variable;

import java.awt.*;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.List;
/**
 *
 * @author Oscar Aguilar
 * @date 16/07/2024
 * @description - This user interfaces is for the Knot pseudo
 * code compiler. This interfaces will help us to:
 * 1. Compile the code, checking its syntax and semantic 2.
 * 2. See how the process is compiled, in the text area below.
 * 3. Save what is in the main text area (where the code is written) in a txt file.
 */

public class Interfaz extends javax.swing.JFrame {

    private Set<String> palabrasReservadas;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        setupListeners();
        inicializarPalabrasReservadas();
    }
private void inicializarPalabrasReservadas() {
        palabrasReservadas = new HashSet<>();
        palabrasReservadas.add("public");
        palabrasReservadas.add("private");
        palabrasReservadas.add("void");
        palabrasReservadas.add("int");
        palabrasReservadas.add("if");
        palabrasReservadas.add("else");
        palabrasReservadas.add("for");
        palabrasReservadas.add("while");
    }
private void setupListeners() {
        txtCodigo.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                procesarTexto();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                procesarTexto();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                procesarTexto();
            }
        });
    }
private void validarCodigo(String texto) {
        // Implementa tu lógica de validación de código aquí
        // Por ejemplo, podrías comprobar si todas las llaves están balanceadas
        int balance = 0;
        boolean valido = true;
        for (char c : texto.toCharArray()) {
            if (c == '{') balance++;
            if (c == '}') balance--;
            if (balance < 0) {
                valido = false;
                break;
            }
        }
        if (balance != 0) valido = false;

        if (valido) {
            txtCodigo.setForeground(Color.BLACK);
        } else {
            txtCodigo.setForeground(Color.RED);
        }
    }
private void procesarTexto() {
        String texto = txtCodigo.getText();
        validarCodigo(texto);
        resaltarPalabrasReservadas(texto);
    }
private void resaltarPalabrasReservadas(String texto) {
        Highlighter highlighter = txtCodigo.getHighlighter();
        highlighter.removeAllHighlights();
        DefaultHighlighter.DefaultHighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);

        for (String palabra : palabrasReservadas) {
            Pattern pattern = Pattern.compile("\\b" + palabra + "\\b");
            Matcher matcher = pattern.matcher(texto);
            while (matcher.find()) {
                try {
                    highlighter.addHighlight(matcher.start(), matcher.end(), painter);
                } catch (BadLocationException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtCodigo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConsola = new javax.swing.JTextArea();
        btnCompilar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(1005, 810, 810, 810));
        setMaximumSize(new java.awt.Dimension(1005, 810));
        setMinimumSize(new java.awt.Dimension(1005, 810));
        setPreferredSize(new java.awt.Dimension(1005, 810));
        setSize(new java.awt.Dimension(1005, 810));
        getContentPane().setLayout(null);

        txtCodigo.setColumns(20);
        txtCodigo.setRows(5);
        jScrollPane1.setViewportView(txtCodigo);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 30, 990, 490);

        txtConsola.setColumns(20);
        txtConsola.setRows(5);
        jScrollPane2.setViewportView(txtConsola);

        getContentPane().add(jScrollPane2);
        jScrollPane2.setBounds(0, 530, 990, 220);

        btnCompilar.setText("Compilar");
        btnCompilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCompilarActionPerformed(evt);
            }
        });
        getContentPane().add(btnCompilar);
        btnCompilar.setBounds(0, 0, 210, 30);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        getContentPane().add(btnLimpiar);
        btnLimpiar.setBounds(210, 0, 220, 30);

        jMenu1.setText("Archivo");

        jCheckBoxMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("Save");
        jCheckBoxMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void process(String[] lines){
        for (String code : lines) {
            txtConsola.setText("Testing code: " + code);
            Lexer lexer = new Lexer(new StringReader(code));
            List<Token> tokens = lexer.tokenize();

            SyntaxAnalyzerVariables syntaxAnalyzer = new SyntaxAnalyzerVariables(tokens);
            try {
                syntaxAnalyzer.analyze();
                txtConsola.setText("Syntax is correct.");

            } catch (SyntaxException e) {
                txtConsola.setText("Syntax error: " + e.getMessage());
            }
        }

        for (String code : lines) {
            txtConsola.setText("Testing code: " + code);
            Lexer lexer = new Lexer(new StringReader(code));
            List<Token> tokens = lexer.tokenize();

            SyntaxAnalyzerControlStructures syntaxAnalyzer = new SyntaxAnalyzerControlStructures(tokens);
            try {
                syntaxAnalyzer.analyze();
                txtConsola.setText("Syntax is correct.");
            } catch (SyntaxException e) {
                txtConsola.setText("Syntax error: " + e.getMessage());
            }
        }

        StringBuilder texto = new StringBuilder();

        // Iterar sobre el array de cadenas y construir el texto completo
        for (String linea : lines) {
            if (!linea.trim().isEmpty()) {
                texto.append(linea).append("\n");
            }
        }

        Semantic parser = new Semantic();
        parser.parseText(texto.toString());

        for (Variable var : parser.getVariables()) {
            txtConsola.setText("Tipo: " + var.getTipo() + ", Nombre: " + var.getNombre() + ", Valor: " + var.getValor());
        }
    }
    // This is the btn Compiler, where with a click all start...
    private void btnCompilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCompilarActionPerformed
        // we get the text (code) of the textArea...
        String text = txtCodigo.getText();
        String[] lines = text.split("\n");

        process(lines);
    }//GEN-LAST:event_btnCompilarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtCodigo.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void jCheckBoxMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ActionPerformed
    String codigo = txtCodigo.getText();

    String nombreArchivo = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo:", "Guardar archivo", JOptionPane.PLAIN_MESSAGE);

    if (nombreArchivo != null && !nombreArchivo.trim().isEmpty()) {
        if (!nombreArchivo.endsWith(".txt")) {
            nombreArchivo += ".txt";
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(nombreArchivo))) {
            writer.write(codigo);
            JOptionPane.showMessageDialog(null, "El código ha sido guardado exitosamente en " + nombreArchivo);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(null, "Nombre de archivo no válido", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_jCheckBoxMenuItem1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCompilar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtCodigo;
    private javax.swing.JTextArea txtConsola;
    // End of variables declaration//GEN-END:variables
}
